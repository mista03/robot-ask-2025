#include <AFMotor.h>
#include <Servo.h>

// Definicje pinów dla czujnika ultradźwiękowego i serwa
#define TRIG_PIN 2
#define ECHO_PIN 13
#define SERVO_PIN 10

// Kierunki, które może wybrać robot
#define LEFT 0
#define BACK 1
#define RIGHT 2
#define NONE 3

// Deklaracje funkcji, które nie są automatycznie deklarowane przez kompilator
void look(uint8_t degrees, bool wait = true);
uint8_t getDirection(uint8_t priority = NONE);

// Definicje silników
AF_DCMotor RR(1);  // prawa tylna
AF_DCMotor FR(2);  // prawa przednia
AF_DCMotor FL(3);  // lewa przednia
AF_DCMotor RL(4);  // lewa tylna
Servo servo;       // serwo odpowiedzialne za obracanie czujnikiem

// Stan początkowy obrotu serwa
uint8_t lastServoRotation = 180;
// Co ile iteracji robot ma się rozglądać
uint8_t lookInterval = 4;

// Parametry odległości (w cm)
uint8_t maxDist = 150;     // maksymalny dystans, któru czujnik odpowiednio wykrywa
uint8_t stopDist = 40;     // minimalny dystans przed przeszkodą
uint8_t sideDist = 30;     // jeżeli boczny odczyt < sideDist, traktuj jako przeszkodę

// Timeout dla pulseIn obliczony z przybliżonej prędkości dźwięku (ok. 340 m/s)

uint16_t timeout = (maxDist + 10) * 59;

// Prędkości jazdy i skręcania
uint8_t launchSpeed = 120; // prędkość ruszania
uint8_t motorSpeed = 80; // prędkość normalnej jazdy
uint8_t slowSpeed = 70; // zwolnienie na czas rozglądania
uint8_t turnSpeed = 160; // prędkość skręcania
uint16_t turnTime = 500;  // czas skrętu w ms

// Korekty prędkości dla wyrównania różnic mechanicznych między silnikami
uint8_t offsetRL = 15;
uint8_t offsetFL = 15;
uint8_t offsetRR = 0;
uint8_t offsetFR = 0;

void setup() {
  Serial.begin(9600);

  // Zatrzymanie wszystkich silników na starcie
  RL.run(RELEASE);
  FL.run(RELEASE);
  RR.run(RELEASE);
  FR.run(RELEASE);

  servo.attach(SERVO_PIN);  // Inicjalizacja serwa
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
}

void loop() {
  // Spójrz przed siebie i zmierz odległość
  look(90);
  uint8_t counter = 0;
  uint8_t priority = NONE;
  uint16_t distance = getDistance();

  // Jeśli droga jest wolna rozpędź się
  if (distance > stopDist)
    changeSpeed(launchSpeed, motorSpeed, 10);

  // Jazda do momentu wykrycia przeszkody przed sobą
  while (distance > stopDist) {
    if (counter >= lookInterval) {
      // Zmniejsz prędkość i sprawdź, czy z boków nie zbliża się przeszkoda
      changeSpeed(motorSpeed, slowSpeed, 15);

      // Rozglądanie się o 40 stopni na boki w celu detekcji pochylonych przeszkód
      if (checkSide(130)) {  // lewa strona
        priority = RIGHT;
        break;
      }
      if (checkSide(50)) {   // prawa strona
        priority = LEFT;
        break;
      }

      // Powrót wzroku na przód i zwiększenie prędkości
      counter = 0;
      look(90, false);
      changeSpeed(slowSpeed, motorSpeed, 15);
    } else {
      delay(200);  // Oczekiwanie między pomiarami
    }

    distance = getDistance();
    counter++;
  }

  stop();  // przeszkoda - zatrzymaj się

  // Wybierz kierunek, w którym można bezpiecznie pojechać
  bool freeToGo = false;
  while (!freeToGo) {
    uint8_t turnDir = getDirection(priority);
    Serial.print("turn = ");
    Serial.println(turnDir);

    switch (turnDir) {
      // Po skręcie w lewo możliwa nachylona przeszkoda po prawej
      case LEFT:
        turn(LEFT, turnTime);
        freeToGo = !checkSide(50); // czy nadal przeszkoda po lewej
        break;
      // Po skręcie w lewo możliwa nachylona przeszkoda po lewej
      case RIGHT:
        turn(RIGHT, turnTime);
        freeToGo = !checkSide(130); // czy nadal przeszkoda po prawej
        break;
      case BACK:
        turn(LEFT, turnTime * 2);  // zawracanie
        freeToGo = true;
        break;
    }
  }
}

// Płynna zmiana prędkości między wartościami
void changeSpeed(uint8_t initial, uint8_t target, uint16_t duration) {
  if (initial == target) return;
  uint8_t step = (target > initial) ? 1 : -1;

  for (uint8_t i = initial; i != target; i += step) {
    RL.setSpeed(i + offsetRL);
    FL.setSpeed(i + offsetFL);
    RR.setSpeed(i + offsetRR);
    FR.setSpeed(i + offsetFR);

    RL.run(FORWARD);
    FL.run(FORWARD);
    RR.run(FORWARD);
    FR.run(FORWARD);

    delay(duration);  // czas pomiędzy kolejnymi krokami zmiany prędkości
  }
}

// Zatrzymanie wszystkich silników
void stop() {
  RL.run(RELEASE);
  FL.run(RELEASE);
  RR.run(RELEASE);
  FR.run(RELEASE);
}

// Wykonanie skrętu w prawo lub lewo przez określony czas
void turn(uint8_t direction, uint16_t duration) {
  RL.setSpeed(turnSpeed + offsetRL);
  FL.setSpeed(turnSpeed + offsetFL);
  RR.setSpeed(turnSpeed + offsetRR);
  FR.setSpeed(turnSpeed + offsetFR);

  // Skręt przez obrót przeciwnych kół w przeciwnych kierunkach
  switch (direction) {
    case RIGHT:
      RL.run(FORWARD);
      FL.run(FORWARD);
      RR.run(BACKWARD);
      FR.run(BACKWARD);
      break;
    default:  // LEFT i BACK (BACK = dwa razy LEFT)
      RL.run(BACKWARD);
      FL.run(BACKWARD);
      RR.run(FORWARD);
      FR.run(FORWARD);
      break;
  }

  delay(duration);

  stop();
}

// Pomiar odległości czujnikiem ultradźwiękowym
uint16_t getDistance() {
  uint32_t pingTime;
  uint16_t distance;

  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  pingTime = pulseIn(ECHO_PIN, HIGH, timeout);  // mierzenie czasu echa
  distance = pingTime * 0.017;  // przeliczenie czasu na cm

  Serial.print("dist = ");
  Serial.println(distance);

  return distance;
}

// Ustawienie kąta serwa (czujnika) i ewentualne oczekiwanie na jego wykonanie
void look(uint8_t degrees, bool wait) {
  servo.write(degrees);
  uint8_t degreeChange = abs(lastServoRotation - degrees);
  lastServoRotation = degrees;

  if (!wait) return;
  delay(degreeChange * 6);  // czas potrzebny serwu na obrót
}

// Sprawdzenie, czy w danym kierunku bocznym znajduje się przeszkoda
bool checkSide(uint8_t degrees) {
  look(degrees);
  uint16_t distance = getDistance();

  return distance < sideDist;
}

// Wybór najlepszego kierunku jazdy w oparciu o pomiary boczne
uint8_t getDirection(uint8_t priority) {
  uint16_t distances[2] = {0, 0};  // [LEFT, RIGHT]
  uint8_t turnDir;

  // Pomiar stron w zależności od priorytetu
  if (priority == LEFT || priority == NONE) {
    look(180);
    distances[0] = getDistance();
  }

  if (priority == RIGHT || priority == NONE) {
    look(0);
    distances[1] = getDistance();
  }

  // Logika wyboru najlepszego kierunku jazdy
  if (distances[0] >= maxDist && distances[1] >= maxDist)
    turnDir = LEFT;  // obie strony dobre, losowo lewo
  else if (distances[0] <= stopDist && distances[1] <= stopDist)
    turnDir = BACK;  // brak miejsca - zawróć
  else if (distances[0] >= distances[1])
    turnDir = LEFT;
  else
    turnDir = RIGHT;

  return turnDir;
}